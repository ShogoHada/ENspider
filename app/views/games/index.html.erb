<h4>
  <%= render "layouts/search_form" %>
</h4>

<% if current_user.present? %>
  <h3>メモ</h3>
<% end %>
  
<div class="area line-height-1">
  <% if current_user.present? %>
    <% current_user.used_words.reverse.each do |item| %>
      <p><%= link_to item.word,{:controller=>"items",:action=>"wordSearch",word: item.word, search:"perfect_match"}%></p>
    <% end %>
  <% end %>
</div>

<!DOCTYPE html>
<html lang="en-us">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Unity WebGL Player | ENspider</title>
    <link rel="shortcut icon" href="../assets/TemplateData/favicon.ico">
    <link rel="stylesheet" href="../assets/TemplateData/style.css">
  </head>
  <body>
    <div id="unity-container" class="unity-desktop">
      <canvas id="unity-canvas" width=960 height=540></canvas>
      <div id="unity-loading-bar">
        <div id="unity-logo"></div>
        <div id="unity-progress-bar-empty">
          <div id="unity-progress-bar-full"></div>
        </div>
      </div>
      <div id="unity-mobile-warning">
        WebGL builds are not supported on mobile devices.
      </div>
      <div id="unity-footer">
        <div id="unity-webgl-logo"></div>
        <div id="unity-fullscreen-button"></div>
        <h3>ENspider</h3>
        <p>制限時間内に落ちてるアルファベットを集め、どれだけ英単語を作つことができるか競います。</p>
<h3>基本操作</h3>
<p>矢印キー: 移動</p>
<p>Zキー: アルファベットを拾う</p>
<p>Xキー: アルファベットを置く</p>
<p>Cキー: セットしたアルファベットで英単語を作成</p>
<h3>ルール</h3>
<p>・青いタイルに接してる白いタイルにのみ、アルファっベトをセットすることができる。</p>
<p>・セットできるとタイルの色が赤色になる。</p>
<p>・アルファベットをセットする際、離れたタイルにはセットすることはできないので注意。</p>
<p>・単語ができたらタイルの上でCキーを押すことで単語を作ることができる。</p>
<p>・英単語間違ってたら作れない。</p>
<p>・一文字の英単語は作ることができない。</p>
<p>・単語はセットしたアルファベットの順番に作成される。</p>
<p>例: o → n という順番にセットすれば"on"</p>
<p>n → o という順番なら"no"という単語を作られる。</p>
<p>・間違えて設置したアルファベットは拾い直すことができる。</p>
<p>・間違って拾ったやつ捨てることができる。</p>

      </div>
    </div>
    <script>
      var buildUrl = "../assets/Build";
      var loaderUrl = buildUrl + "/ENspider.loader.js";
      var config = {
        dataUrl: buildUrl + "/ENspider.data.unityweb",
        frameworkUrl: buildUrl + "/ENspider.framework.js.unityweb",
        codeUrl: buildUrl + "/ENspider.wasm.unityweb",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "DefaultCompany",
        productName: "ENspider",
        productVersion: "1.0",
      };

      var container = document.querySelector("#unity-container");
      var canvas = document.querySelector("#unity-canvas");
      var loadingBar = document.querySelector("#unity-loading-bar");
      var progressBarFull = document.querySelector("#unity-progress-bar-full");
      var fullscreenButton = document.querySelector("#unity-fullscreen-button");
      var mobileWarning = document.querySelector("#unity-mobile-warning");

      // By default Unity keeps WebGL canvas render target size matched with
      // the DOM size of the canvas element (scaled by window.devicePixelRatio)
      // Set this to false if you want to decouple this synchronization from
      // happening inside the engine, and you would instead like to size up
      // the canvas DOM size and WebGL render target sizes yourself.
      // config.matchWebGLToCanvasSize = false;

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
        // Avoid draining fillrate performance on mobile devices,
        // and default/override low DPI mode on mobile browsers.
        config.devicePixelRatio = 1;
        mobileWarning.style.display = "block";
        setTimeout(() => {
          mobileWarning.style.display = "none";
        }, 5000);
      } else {
        canvas.style.width = "960px";
        canvas.style.height = "540px";
      }
      loadingBar.style.display = "block";

      var script = document.createElement("script");
      script.src = loaderUrl;
      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          progressBarFull.style.width = 100 * progress + "%";
        }).then((unityInstance) => {
          loadingBar.style.display = "none";
          fullscreenButton.onclick = () => {
            unityInstance.SetFullscreen(1);
          };
        }).catch((message) => {
          alert(message);
        });
      };
      document.body.appendChild(script);
    </script>
    <script>
    var recaptureInputAndFocus = function() {
      if(canvas) {
        canvas.setAttribute("tabindex", "1");
        canvas.focus(); 
      } else
        setTimeout(recaptureInputAndFocus, 100);
    }
    recaptureInputAndFocus();
    </script>
  </body>
</html>
